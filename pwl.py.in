#!/usr/bin/env python3
##
## pwl - python with lisp, a collection of lisp evaluators for Python
##       https://github.com/minmus-9/pwl
## Copyright (C) 2025  Mark Hays (github:minmus-9)
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

"pwl.py - python with lisp, full runtime"

## pylint: disable=invalid-name,too-many-lines
## XXX pylint: disable=missing-docstring

from pylisp import lisp

__all__ = ("lisp", "load")


preload_src = r"""
;; @preload_src@
"""


@lisp.glbl("time")
def op_time(state, frame):
    import time  ## pylint: disable=import-outside-toplevel
    proc, n = state.unpack(frame.x, 2)
    t0 = time.time()
    for _ in range(n):
        state.eval(proc, frame.e)
    t1 = time.time()
    dt = max(t1 - t0, 1e-7)
    ret = state.cons(n / dt, lisp.EL)
    ret = state.cons(1e6 * dt / n, ret)
    ret = state.cons(dt, ret)
    ret = state.cons(n, ret)
    return state.bounce(frame.c, state, ret)


def load():
    lisp.execute(preload_src)


load()  ## load libs
lisp.update()  ## update from glbl() and spcl() decls


if __name__ == "__main__":
    lisp.main()


## EOF
